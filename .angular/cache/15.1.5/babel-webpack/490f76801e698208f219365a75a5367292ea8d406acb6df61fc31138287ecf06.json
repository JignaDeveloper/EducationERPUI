{"ast":null,"code":"import { HTTP_INTERCEPTORS, HttpErrorResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { EventData } from '../shared/event.class';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/storage.service\";\nimport * as i2 from \"../shared/event-bus.service\";\nexport class HttpRequestInterceptor {\n  constructor(storageService, eventBusService) {\n    this.storageService = storageService;\n    this.eventBusService = eventBusService;\n    this.isRefreshing = false;\n  }\n  intercept(req, next) {\n    req = req.clone({\n      withCredentials: true\n    });\n    return next.handle(req).pipe(catchError(error => {\n      if (error instanceof HttpErrorResponse && !req.url.includes('auth/signin') && error.status === 401) {\n        return this.handle401Error(req, next);\n      }\n      return throwError(() => error);\n    }));\n  }\n  handle401Error(request, next) {\n    if (!this.isRefreshing) {\n      this.isRefreshing = true;\n      if (this.storageService.isLoggedIn()) {\n        this.eventBusService.emit(new EventData('logout', null));\n      }\n    }\n    return next.handle(request);\n  }\n}\nHttpRequestInterceptor.ɵfac = function HttpRequestInterceptor_Factory(t) {\n  return new (t || HttpRequestInterceptor)(i0.ɵɵinject(i1.StorageService), i0.ɵɵinject(i2.EventBusService));\n};\nHttpRequestInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpRequestInterceptor,\n  factory: HttpRequestInterceptor.ɵfac\n});\nexport const httpInterceptorProviders = [{\n  provide: HTTP_INTERCEPTORS,\n  useClass: HttpRequestInterceptor,\n  multi: true\n}];","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}